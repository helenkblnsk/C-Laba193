using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Lena1
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void buttonAddition_Click(object sender, RoutedEventArgs e)
        {
            Vektor vektorFirst = new Vektor(double.Parse(coordinatX_first.Text),
                double.Parse(coordinatY_first.Text),
                double.Parse(coordinatZ_first.Text));
            Vektor vektorSecond = new Vektor(double.Parse(coordinatX_second.Text),
                double.Parse(coordinatY_second.Text),
                double.Parse(coordinatZ_second.Text));
            labelAnswer.Content = (vektorFirst + vektorSecond).ToString();
        }

        private void buttonScalarProduct_Click(object sender, RoutedEventArgs e)
        {
            Vektor vektorFirst = new Vektor(double.Parse(coordinatX_first.Text),
                            double.Parse(coordinatY_first.Text),
                            double.Parse(coordinatZ_first.Text));
            Vektor vektorSecond = new Vektor(double.Parse(coordinatX_second.Text),
                double.Parse(coordinatY_second.Text),
                double.Parse(coordinatZ_second.Text));
            labelAnswer.Content = (vektorFirst * vektorSecond).ToString();
        }

        private void buttonVectorProduct_Click(object sender, RoutedEventArgs e)
        {
            Vektor vektorFirst = new Vektor(double.Parse(coordinatX_first.Text),
                double.Parse(coordinatY_first.Text),
                double.Parse(coordinatZ_first.Text));
            Vektor vektorSecond = new Vektor(double.Parse(coordinatX_second.Text),
                double.Parse(coordinatY_second.Text),
                double.Parse(coordinatZ_second.Text));
            labelAnswer.FontSize = 20;
            labelAnswer.Content = "Ответ после векторного умножения\n"+(vektorFirst % vektorSecond).ToString();
        }

        private void exampleOne_Click(object sender, RoutedEventArgs e)
        {
            coordinatX_first.Text = "6";
            coordinatY_first.Text = "5";
            coordinatZ_first.Text = "4";

            coordinatX_second.Text = "9";
            coordinatY_second.Text = "8";
            coordinatZ_second.Text = "7";
        }

        private void exampleSecond_Click(object sender, RoutedEventArgs e)
        {
            coordinatX_first.Text = "6.5";
            coordinatY_first.Text = "5.5";
            coordinatZ_first.Text = "4.5";

            coordinatX_second.Text = "9.5";
            coordinatY_second.Text = "8.5";
            coordinatZ_second.Text = "7.5";
        }

        private void exampleThree_Click(object sender, RoutedEventArgs e)
        {
            coordinatX_first.Text = "13";
            coordinatY_first.Text = "5.43";
            coordinatZ_first.Text = "4.34";

            coordinatX_second.Text = "19.42";
            coordinatY_second.Text = "8.14";
            coordinatZ_second.Text = "7.42";
        }
    }
    class Vektor
    {
        private double x;
        private double y;
        private double z;
        private double corner_A;
        private double corner_B;
        private double corner_C;

        public Vektor(double z, double y, double x)
        {
            Z = z;
            Y = y;
            X = x;
            corner_A = Corner(X);
            corner_B = Corner(Y);
            corner_C = Corner(Z);
        }

        public double Corner(double coordinate)//Метод определения направляющих косинусов вектора
        {
            return Math.Round(Math.Asin(coordinate / Math.Sqrt(Math.Pow(X, 2) + Math.Pow(Y, 2) + Math.Pow(Z, 2))) * 57, 3);
        }
        public double Z
        {
            get { return z; }
            set { z = value; }
        }
        public double Y
        {
            get { return y; }
            set { y = value; }
        }
        public double X
        {
            get { return x; }
            set { x = value; }
        }
        public override string ToString()
        {
            return string.Format($"Ответ" +
                $"\n X = {X}" +
                $"\n Y = {Y}" +
                $"\n Z = {Z}" +
                $"\n Corner Alfa = {corner_A}" +
                $"\n Corner Beta = {corner_B}" +
                $"\n Corner C(Gamma) = {corner_C}");
        }

        public static Vektor operator +(Vektor vektor1, Vektor vektor2)//Сложение векторов
        {
            return new Vektor(vektor1.X + vektor2.X, vektor1.Y + vektor2.Y, vektor1.Z + vektor2.Z);
        }
        public static double operator %(Vektor vektor1, Vektor vektor2)//Скалярное определение 
        {
            return vektor1.X * vektor2.X + vektor1.Y * vektor2.Y + vektor1.Z * vektor2.Z;
        }
        public static Vektor operator *(Vektor vektor1, Vektor vektor2)//Векторное произведение 
        {
            return new Vektor(vektor1.Y * vektor2.Z - vektor1.Z * vektor2.Y,
                                vektor1.Z * vektor2.X - vektor1.X * vektor2.Z,
                                vektor1.X * vektor2.Y - vektor1.Y * vektor2.X);
        }
    }
}



<Window x:Class="Lena1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Lena1"
        mc:Ignorable="d"
        Title="MainWindow" Height="432.4" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="49*"/>
            <ColumnDefinition Width="745*"/>
        </Grid.ColumnDefinitions>
        <Grid HorizontalAlignment="Left" Height="160" VerticalAlignment="Top" Width="400" Grid.ColumnSpan="2">
            <TextBox x:Name="coordinatX_first"  HorizontalAlignment="Left" Height="60" Margin="10,80,0,0" TextWrapping="Wrap"  Text="Coordination X" VerticalAlignment="Top" Width="120"/>
            <TextBox
